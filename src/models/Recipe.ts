// src/models/Recipe.ts
import mongoose, { Document, Model, Schema, Types } from 'mongoose';

// Interface for individual ingredients
export interface IIngredient {
  item: string;         // Name of the ingredient, e.g., "All-purpose Flour", "Large Eggs"
  quantity: string;     // Quantity as a string to allow for "1/2", "1-2", "a pinch"
  unit?: string;         // Optional: e.g., "cup", "tbsp", "grams", "ml", "cloves"
  notes?: string;        // Optional: e.g., "chopped", "melted", "at room temperature"
}

// Main Recipe Interface
export interface IRecipe extends Document {
  _id: Types.ObjectId; // Explicitly define _id for clarity, Mongoose adds it by default
  userId: Types.ObjectId; // Link to the User who owns/created it
  name: string;
  description?: string;
  ingredients: IIngredient[];
  instructions: string[];
  prepTime?: string;       // e.g., "15 minutes", "Approx. 20 mins"
  cookTime?: string;       // e.g., "30 minutes", "1 hour"
  totalTime?: string;      // Optional: prepTime + cookTime
  servings?: number;       // e.g., 4, "2-4" (consider making string if flexible)
  cuisine?: string;        // e.g., "Italian", "Mexican", "Indian"
  course?: string;         // Optional: e.g., "Appetizer", "Main Course", "Dessert", "Side Dish" (similar to mealType)
  skillLevel?: 'Beginner' | 'Intermediate' | 'Advanced' | string; // String for flexibility
  tags?: string[];         // e.g., ["quick", "vegan", "dinner", "spicy", "gluten-free"]
  imageUrl?: string;       // URL to an image of the dish
  isFavorite?: boolean;
  notes?: string;          // User's personal notes or AI-generated tips
  source: 'ai' | 'user_created' | 'imported'; // Origin of the recipe
  aiPrompt?: {             // Store the prompt if generated by AI
    ingredients?: string[];
    dietaryRestrictions?: string[];
    cuisine?: string;
    skillLevel?: string;
    mealType?: string;
    specificRequests?: string;
  } | string; // Allow string for simpler prompts or object for structured
  rating?: number;         // Optional: User rating (e.g., 1-5)
  timesMade?: number;      // Optional: How many times the user has made this recipe
  createdAt: Date;
  updatedAt: Date;
}

const IngredientSchema: Schema<IIngredient> = new Schema({
  item: { type: String, required: true, trim: true },
  quantity: { type: String, required: true, trim: true }, // Kept as string for flexibility
  unit: { type: String, trim: true },
  notes: { type: String, trim: true },
}, { _id: false }); // No separate _id for subdocuments unless needed

const RecipeSchema: Schema<IRecipe> = new Schema({
  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true, index: true },
  name: { type: String, required: true, trim: true, index: true }, // Index for faster searching
  description: { type: String, trim: true },
  ingredients: { type: [IngredientSchema], default: [] },
  instructions: { type: [String], required: true, default: [] },
  prepTime: { type: String, trim: true },
  cookTime: { type: String, trim: true },
  totalTime: { type: String, trim: true },
  servings: { type: Number }, // Or String if you need ranges like "2-4"
  cuisine: { type: String, trim: true, lowercase: true },
  course: { type: String, trim: true, lowercase: true },
  skillLevel: { type: String, trim: true },
  tags: [{ type: String, trim: true, lowercase: true }],
  imageUrl: { type: String, trim: true },
  isFavorite: { type: Boolean, default: false },
  notes: { type: String, trim: true },
  source: { type: String, enum: ['ai', 'user_created', 'imported'], default: 'user_created', required: true },
  aiPrompt: { type: Schema.Types.Mixed }, // Flexible for string or object
  rating: { type: Number, min: 1, max: 5 },
  timesMade: { type: Number, min: 0, default: 0 },
}, { timestamps: true }); // Adds createdAt and updatedAt automatically

// Ensure text index for searching recipe names and descriptions
// RecipeSchema.index({ name: 'text', description: 'text', tags: 'text', cuisine: 'text' });
// If you plan to search, uncomment and adjust the text index.

const RecipeModel: Model<IRecipe> = mongoose.models.Recipe || mongoose.model<IRecipe>('Recipe', RecipeSchema);

export default RecipeModel;